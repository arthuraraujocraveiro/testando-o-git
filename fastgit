
1. Controle de versão (versionamento)

- Sistema responsavel por Controlar diferentes versões do projeto 
- Snapshots dos estados 

2. Comandos git 

github -> plataforma que armazena os repositorios(projetos) ! 
git    -> controle de versao , local 

3. Subir no github 

1. Configurações iniciais 
2. Iniciar o repositório git 
3. Ciclo de vida dos pacotes 
    - untracked  -> não foi visto pelo o git 
    - unmodified -> o git enxerga o arquivo , mas nao houve modificação 
    - modified   -> modificou 
    - staged     -> versão pré-comitada  
4. Verificar os Logs
    - decorate 
    - shorlog 
    - --author="arthur"
    - shortlog -sn 
    - grapy 
    - show 
    - git show <hash>

5. Mudanças antes de ser comitado, so funciona se o arquivo já
estiver sendo rastreado ! 

6. Resetar os erros , com o checkout

7. Como tirar o arquivo da área do staging(pronta para o commit)

8. Como funciona o git reset e suas variações ? 
	--mixed , --soft , --hard , git reset HEAD

9. Mexendo com o git remote 
	- adicionar um link de um repositorio remoto com nome personalizado 
	- verificar o link 
	- fazer um push (enviar) -> git push -u origin <branch> 
	- para que ser a opcao -u 

10. Fazendo um clone do repositório 

11. O que é um branch ? 

	- Pode alterar o projeto principal sem alterar a branch pricipal 
	- Facilmente " desligavel  "
	- Multiplas pessoas trabalhando 
	- Evita conflitos 

12. Cria uma branch e verifique ! 
git checkout -b <nome>

13. Listar , Navegar , Deletar , Adicionar 
git branch , git branch -D , git checout -b <nome>

14. Fazer a uniao -> merge e rebase 

15. Merge 
Como funcioanndo :
faz um commit juntando todas as alterações da branch secundária e da principal !

Vantagem                           x  Desvantagem
Operaçao não destrutiva               commit extra e histórico poluído

16. Rebase 
Ele joga as alterações para o inicío da fila 

Vantagem                           x  Desvantagem
evita commits extras                  perde a ordem cronológica
histórico linear

17. Arquivo -> .gitignore

18. Git stash 
responsável por guardar modificações que ainda não foram comitadas em um arquivo
ou em forma de pilha, com isso o usuário pode reutilizar a modificação armazenada 
posteriormente !

git stash , git stash apply , git stash list , git stash clear 

19. Criando Tags e subindo a tag no github !

20. Usando o git revert , para que serve e como usa-lo , qual a funcionalidade ?
 

Comandos adicionais: 

Remover o arquivo da area de staged para unstaged -> git restore --staged <arquivo>

Arquivo já rastreiado, e na área de staged , porém quero remover as modificações 
do arquivo e não tirar o arquivo do staged -> git restore <arquivo>

